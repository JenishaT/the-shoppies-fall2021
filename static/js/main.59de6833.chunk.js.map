{"version":3,"sources":["components/hompage/homepage.component.jsx","components/navbar/navbar.component.jsx","redux/movie/movie.action.types.js","redux/movie/movie.actions.js","components/searchbar/searchbar.component.jsx","assets/defaultPoster.jpg","components/movie-card/movie-card.component.jsx","components/search-results/search-results.component.jsx","components/nomination-list-card/nomination-list-card.component.jsx","components/nomination-submission-dialog/nomination-submission-dialog.component.jsx","components/nominations-list/nominations-list.component.jsx","components/nominate-movies/nominate-movies.component.jsx","components/my-nominations-card/my-nominations-card.component.jsx","components/my-nominations/my-nominations.component.jsx","App.js","redux/store.js","reportWebVitals.js","redux/movie/movie.reducer.js","redux/root.reducer.js","theme.js","index.js"],"names":["Homepage","className","Button","variant","color","disableElevation","component","onClick","window","location","href","React","Component","navOptions","id","label","NavBar","state","selectedNavOption","anchorEl","handleChange","event","newSelectedOption","setState","handleMenu","target","handleClose","this","pathname","AppBar","position","Grid","container","direction","alignContent","spacing","item","xs","Hidden","smDown","Tabs","value","indicatorColor","onChange","map","index","Tab","Link","to","mdUp","IconButton","Menu","open","onClose","MenuItem","selected","MOVIE_ACTION_TYPES","MOVIE_SEARCH_SUCCESS","RETRIEVE_MOVIE_PLOT_SHORT","RETRIEVE_MOVIE_GENRES","ADD_NOMINATION_SUCCESS","REMOVE_NOMINATION_SUCCESS","SUBMIT_NOMINATION_SUCCESS","CLEAR_SEARCH_SUCCESS","searchMovies","query","page","dispatch","a","path","axios","get","data","result","Search","filter","self","findIndex","v","imdbID","totalResults","type","payload","getShortPlot","addNomination","getState","nominations","movie","some","nomination","length","Genre","split","push","removeNomination","deleteIndex","splice","submitNominations","clearSearch","SearchBar","clearQueryVisible","e","name","props","updateQuery","searchSubmit","preventDefault","clearQuery","justify","alignItems","Paper","onSubmit","InputBase","placeholder","fullWidth","Divider","orientation","flexItem","connect","MovieCard","movies","prevProps","submitted","title","message","then","enqueueSnackbar","anchorOrigin","vertical","horizontal","autoHideDuration","TransitionComponent","Slide","action","key","closeSnackbar","ev","src","defaultPoster","Card","CardContent","Poster","alt","onError","addDefaultSrc","sm","Title","Year","Plot","genre","xsDown","smUp","disabled","nominateMovie","bind","withSnackbar","SearchResults","currentPage","currentSearchPage","totalPages","totalSearchPages","handlePageForward","handlePageBack","toFirstPage","toLastPage","i","getGenres","NominationListCard","Tooltip","placement","arrow","NominationSubmissionDialog","closeSubmissionDialog","closeDialog","Dialog","isOpen","maxWidth","DialogContent","NominationsList","completeNominations","openDialog","Alert","severity","size","NominateMovies","newQuery","onQueryUpdate","md","MyNominationCard","MyNominations","lg","App","persistConfig","reducer","rel","maxSnack","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","INITIAL_STATE","movieReducer","prevState","Math","floor","combineReducers","rootReducer","persistReducer","storage","middleware","thunk","store","createStore","applyMiddleware","persistor","persistStore","theme","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","loading","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.59de6833.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport \"./homepage.styles.scss\";\r\n\r\nclass Homepage extends React.Component {\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"curtain\">\r\n                <div className=\"curtain-wrapper\">\r\n                    <div className=\"curtain-panel curtain-panel-left\">\r\n                    </div>\r\n                    <div className=\"curtain-content\">\r\n                        <div className=\"title\">\r\n                            <h1>Welcome</h1>\r\n                            <h2>to</h2>\r\n                            <h1>The Shoppies</h1>\r\n                        </div>\r\n\r\n                        <div className=\"nominate-button\">\r\n                            <Button variant=\"contained\" color=\"primary\" disableElevation component=\"a\" onClick={()=> window.location.href=\"nominate-movies\"}>\r\n                                Nominate Movies\r\n                            </Button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"curtain-panel curtain-panel-right\">\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\nimport { AppBar, Grid, Tabs, Tab, Hidden, Menu, IconButton, MenuItem } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./navbar.styles.scss\";\r\n\r\nconst navOptions = [\r\n    { id: 0, label: 'Home', href: '/' },\r\n    { id: 1, label: 'Nominate Movies', href: '/nominate-movies' },\r\n    { id: 2, label: 'My Nominations', href: '/my-nominations' }\r\n];\r\n\r\nclass NavBar extends React.Component {\r\n    state = {\r\n        selectedNavOption: '/',\r\n        anchorEl: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ selectedNavOption: window.location.pathname });\r\n    }\r\n\r\n    handleChange = (event, newSelectedOption) => {\r\n        this.setState({ selectedNavOption: newSelectedOption });\r\n    };\r\n\r\n    handleMenu = (event) => {\r\n        this.setState({ anchorEl: event.target });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <AppBar position=\"relative\" color=\"primary\" className=\"navbar\">\r\n                <Grid container direction=\"row\" alignContent=\"space-between\" spacing={7}>\r\n                    <Grid item\r\n                        xs={8}>\r\n                        The Shoppies\r\n                    </Grid>\r\n\r\n                    <Grid item xs={4}>\r\n                        <Hidden smDown>\r\n                            <Tabs className=\"navTabs\"\r\n                                value={this.state.selectedNavOption}\r\n                                indicatorColor=\"secondary\"\r\n                                onChange={this.handleChange}\r\n                            >\r\n                                {navOptions.map(({ label, href }, index) => (\r\n                                    <Tab\r\n                                        key={index}\r\n                                        value={href}\r\n                                        label={label}\r\n                                        component={Link}\r\n                                        to={href}></Tab>\r\n                                ))}\r\n                            </Tabs>\r\n                        </Hidden>\r\n\r\n                        <Hidden mdUp>\r\n                            <IconButton className=\"navTabs\" onClick={this.handleMenu}>\r\n                                <MenuIcon color=\"secondary\" />\r\n                            </IconButton>\r\n                            <Menu\r\n                                anchorEl={this.state.anchorEl}\r\n                                open={!!this.state.anchorEl}\r\n                                onClose={this.handleClose}\r\n                            >\r\n                                {navOptions.map(({ label, href }, index) => (\r\n                                    <MenuItem\r\n                                        key={index}\r\n                                        onClick={this.handleClose}\r\n                                        selected={href === window.location.pathname}\r\n                                        component={Link}\r\n                                        to={href}>\r\n                                        {label}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Menu>\r\n                        </Hidden>\r\n                    </Grid>\r\n                </Grid>\r\n            </AppBar >\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","const MOVIE_ACTION_TYPES = {\r\n    MOVIE_SEARCH_SUCCESS: \"MOVIE_SEARCH_SUCCESS\",\r\n    RETRIEVE_MOVIE_PLOT_SHORT: \"RETRIEVE_MOVIE_PLOT_SHORT\",\r\n    RETRIEVE_MOVIE_GENRES: \"RETRIEVE_MOVIE_GENRES\",\r\n    ADD_NOMINATION_SUCCESS: \"ADD_NOMINATION_SUCCESS\",\r\n    REMOVE_NOMINATION_SUCCESS: \"REMOVE_NOMINATION_SUCCESS\",\r\n    SUBMIT_NOMINATION_SUCCESS: \"SUBMIT_NOMINATION_SUCCESS\",\r\n    CLEAR_SEARCH_SUCCESS: \"CLEAR_SEARCH_SUCCESS\"\r\n  };\r\n  \r\n  export default MOVIE_ACTION_TYPES;","import MOVIE_ACTION_TYPES from \"./movie.action.types\";\r\nimport axios from \"axios\";\r\n\r\nexport const searchMovies = (query, page) => async (dispatch) => {\r\n    const path = \"https://www.omdbapi.com/?apikey=2ae73c8e&type=movie&s=\" + query + \"&page=\" + page;\r\n    const { data } = await axios.get(path);\r\n\r\n    // Filtering search results due to API bug returning duplicates\r\n    const result = data.Search ?  data.Search.filter((value, index, self) => {\r\n        return self.findIndex(v => v.imdbID === value.imdbID) === index;\r\n      }) : [];\r\n    const {totalResults} = data;\r\n    dispatch({ type: MOVIE_ACTION_TYPES.MOVIE_SEARCH_SUCCESS, payload: {result, totalResults, page}});\r\n}\r\n\r\nexport const getShortPlot = (id) => async (dispatch) => {\r\n    const path = \"https://www.omdbapi.com/?apikey=2ae73c8e&plot=short&i=\" + id;\r\n    const { data } = await axios.get(path);\r\n    dispatch({ type: MOVIE_ACTION_TYPES.RETRIEVE_MOVIE_PLOT_SHORT, payload: data });\r\n}\r\n\r\nexport const getGenres = (id) => async (dispatch) => {\r\n    const path = \"https://www.omdbapi.com/?apikey=2ae73c8e&plot=short&i=\" + id;\r\n    const { data } = await axios.get(path);\r\n    dispatch({ type: MOVIE_ACTION_TYPES.RETRIEVE_MOVIE_GENRES, payload: data })\r\n}\r\n\r\nexport const addNomination = (id) => async (dispatch, getState) => {\r\n    let nominations = getState().movie.nominations;\r\n    if (!nominations.some(nomination => nomination.imdbID === id) || nominations.length === 0) {\r\n        const path = \"https://www.omdbapi.com/?apikey=2ae73c8e&plot=short&i=\" + id;\r\n        const { data } = await axios.get(path);\r\n        data.Genre = data.Genre.split(\", \");\r\n        nominations.push(data);\r\n        dispatch({ type: MOVIE_ACTION_TYPES.ADD_NOMINATION_SUCCESS, payload: nominations });\r\n    }\r\n}\r\n\r\nexport const removeNomination = (id) => async (dispatch, getState) => {\r\n    let nominations = getState().movie.nominations;\r\n    let deleteIndex = nominations.findIndex(nomination => nomination.imdbID === id);\r\n    nominations.splice(deleteIndex, 1);\r\n    dispatch({ type: MOVIE_ACTION_TYPES.REMOVE_NOMINATION_SUCCESS, payload: nominations });\r\n}\r\n\r\nexport const submitNominations = () => async (dispatch) => {\r\n    dispatch({ type: MOVIE_ACTION_TYPES.SUBMIT_NOMINATION_SUCCESS});\r\n}\r\n\r\nexport const clearSearch = () => async (dispatch) => {\r\n    dispatch({ type: MOVIE_ACTION_TYPES.CLEAR_SEARCH_SUCCESS});\r\n}\r\n","import React from \"react\";\r\nimport { Paper, InputBase, IconButton, Divider, Grid } from \"@material-ui/core\";\r\nimport ClearQueryIcon from \"@material-ui/icons/Clear\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { connect } from \"react-redux\";\r\nimport { clearSearch, searchMovies } from \"../../redux/movie/movie.actions\";\r\nimport \"./searchbar.styles.scss\";\r\n\r\nclass SearchBar extends React.Component {\r\n    state = {\r\n        query: \"\",\r\n        clearQueryVisible: false\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { value, name } = e.target;\r\n        this.setState({ [name]: value, clearQueryVisible: value !== \"\" });\r\n        this.props.searchMovies(value, 1);\r\n        this.props.updateQuery(value);\r\n    };\r\n\r\n    searchSubmit = (e) => {\r\n        e.preventDefault();\r\n        const { query } = this.state;\r\n        if (query) {\r\n            this.props.searchMovies(query, 1);\r\n            this.setState({ clearQueryVisible: true });\r\n        }\r\n    };\r\n\r\n    clearQuery = (e) => {\r\n        this.props.clearSearch();\r\n        this.setState({ query: \"\", clearQueryVisible: false });\r\n        this.props.updateQuery(\"\");\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({ query: \"\", clearQueryVisible: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\">\r\n                <Grid container item xs={12}>\r\n                    <Paper\r\n                        component=\"form\"\r\n                        id=\"search-bar-container\"\r\n                        variant=\"outlined\"\r\n                        onSubmit={this.searchSubmit}\r\n                    >\r\n                        {this.state.clearQueryVisible ? (\r\n                            <IconButton onClick={this.clearQuery}>\r\n                                <ClearQueryIcon />\r\n                            </IconButton>\r\n                        ) : null}\r\n                        <InputBase\r\n                            id=\"search\"\r\n                            placeholder=\"Search For Movies\"\r\n                            fullWidth\r\n                            value={this.state.query}\r\n                            onChange={this.handleChange}\r\n                            name=\"query\"\r\n                        />\r\n                        <Divider orientation=\"vertical\" flexItem variant=\"middle\" />\r\n                        <IconButton type=\"submit\">\r\n                            <SearchIcon />\r\n                        </IconButton>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    searchMovies: (query, page) => dispatch(searchMovies(query, page)),\r\n    clearSearch: () => dispatch(clearSearch())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SearchBar);\r\n","export default __webpack_public_path__ + \"static/media/defaultPoster.497fa354.jpg\";","import React from 'react';\r\nimport { withSnackbar } from 'notistack';\r\nimport { Card, CardContent, Button, Grid, Hidden, IconButton, Slide } from \"@material-ui/core\";\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect } from \"react-redux\";\r\nimport { getShortPlot, addNomination } from \"../../redux/movie/movie.actions\";\r\nimport defaultPoster from \"../../assets/defaultPoster.jpg\";\r\nimport './movie-card.styles.scss';\r\n\r\nclass MovieCard extends React.Component {\r\n    state = {\r\n        movie: this.props.movie,\r\n        nominations: this.props.movies.nominations\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { movies } = this.props;\r\n        if (movies.nominations !== prevProps.movies.nominations || movies.submitted !== prevProps.movies.submitted) {\r\n            this.setState({ nominations: this.props.movies.nominations });\r\n        }\r\n    }\r\n\r\n    nominateMovie(id, title) {\r\n        const closeAlert = key => (\r\n            <IconButton onClick={() => { this.props.closeSnackbar(key) }} className=\"close-toast\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n        );\r\n\r\n        const message = 'Successfully nominated \"' + title + '\"';\r\n\r\n        this.props.addNomination(id).then(this.props.enqueueSnackbar(message, {\r\n            anchorOrigin: {\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            },\r\n            autoHideDuration: 1500,\r\n            TransitionComponent: Slide,\r\n            variant: \"success\",\r\n            action: closeAlert\r\n        }));\r\n    }\r\n\r\n    addDefaultSrc(ev) {\r\n        ev.target.src = defaultPoster;\r\n    }\r\n\r\n    render() {\r\n        const { movie } = this.state;\r\n        return (\r\n            <Card variant=\"outlined\" id=\"result-card\" key={movie.imdbID}>\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"flex-start\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                >\r\n                    <CardContent>\r\n                        <Grid container direction=\"row\" spacing={2}>\r\n                            <Grid item>\r\n                                {movie.Poster ? (\r\n                                    <img id=\"poster\" src={movie.Poster} alt=\"Poster not available\" onError={this.addDefaultSrc}></img>\r\n                                ) : <img id=\"poster\" src={defaultPoster} alt=\"Poster not available\"></img>}\r\n                            </Grid>\r\n                            <Grid item xs sm container>\r\n                                <Grid item xs container direction=\"column\" spacing={1}>\r\n                                    <Grid item>\r\n                                        <b>{movie.Title}</b> ({movie.Year})\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        {movie.Plot}\r\n                                    </Grid>\r\n                                    <Grid item xs id=\"tags-container\">\r\n                                        <Grid container spacing={1}>\r\n                                            {movie.Genre ? (movie.Genre.map((genre) => (\r\n                                                <Grid item key={genre}>\r\n                                                    <div className=\"tags\">{genre}</div>\r\n                                                </Grid>\r\n                                            ))\r\n                                            ) : null}\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Grid className=\"movie-action-buttons\" justify=\"flex-end\" container spacing={1}>\r\n                                            <Grid item>\r\n                                                <Hidden xsDown>\r\n                                                    <Button className=\"fullsize-button\" variant=\"outlined\" onClick={() => window.open(\"https://www.imdb.com/title/\" + movie.imdbID + \"/\", \"_blank\")}>\r\n                                                        Info <OpenInNewIcon />\r\n                                                    </Button>\r\n                                                </Hidden>\r\n                                                <Hidden smUp>\r\n                                                    <IconButton onClick={() => window.open(\"https://www.imdb.com/title/\" + movie.imdbID + \"/\", \"_blank\")}>\r\n                                                        <OpenInNewIcon />\r\n                                                    </IconButton>\r\n                                                </Hidden>\r\n                                            </Grid>\r\n\r\n                                            <Grid item>\r\n                                                {!this.props.movies.submitted ? (\r\n                                                    <div>\r\n                                                        <Hidden xsDown>\r\n                                                            <Button className=\"fullsize-button\" variant=\"outlined\" disabled={this.state.nominations && (this.state.nominations.some(nomination => nomination.imdbID === movie.imdbID) || this.state.nominations.length === 5)} onClick={this.nominateMovie.bind(this, movie.imdbID, movie.Title)}>\r\n                                                                Nominate\r\n                                                        </Button>\r\n                                                        </Hidden>\r\n                                                        <Hidden smUp>\r\n                                                            <IconButton disabled={this.state.nominations && (this.state.nominations.some(nomination => nomination.imdbID === movie.imdbID) || this.state.nominations.length === 5)} onClick={this.nominateMovie.bind(this, movie.imdbID, movie.Title)}>\r\n                                                                <AddCircleOutlineIcon />\r\n                                                            </IconButton>\r\n                                                        </Hidden>\r\n                                                    </div>)\r\n                                                    : null}\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movies: state.movie\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getShortPlot: (id) => dispatch(getShortPlot(id)),\r\n    addNomination: (id) => dispatch(addNomination(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(MovieCard));","import React from \"react\";\r\nimport { Grid, IconButton, Card } from \"@material-ui/core\";\r\nimport FirstPageRoundedIcon from '@material-ui/icons/FirstPageRounded';\r\nimport ChevronLeftRoundedIcon from '@material-ui/icons/ChevronLeftRounded';\r\nimport ChevronRightRoundedIcon from '@material-ui/icons/ChevronRightRounded';\r\nimport LastPageRoundedIcon from '@material-ui/icons/LastPageRounded';\r\nimport { connect } from \"react-redux\";\r\nimport { getShortPlot, getGenres, searchMovies } from \"../../redux/movie/movie.actions\";\r\nimport MovieCard from \"../movie-card/movie-card.component\";\r\nimport \"./search-results.styles.scss\";\r\n\r\nclass SearchResults extends React.Component {\r\n    state = {\r\n        movies: this.props.movie.movies,\r\n        totalResults: this.props.movie.totalResults,\r\n        currentPage: this.props.movie.currentSearchPage,\r\n        totalPages: this.props.movie.totalSearchPages\r\n    }\r\n\r\n    componentDidMount() {\r\n        let { movies } = this.state;\r\n        if (movies) {\r\n            for (let i = 0; i < movies.length; i++) {\r\n                this.props.getShortPlot(movies[i].imdbID);\r\n                this.props.getGenres(movies[i].imdbID);\r\n            }\r\n        }\r\n        this.setState({\r\n            movies: this.props.movie.movies,\r\n            totalResults: this.props.movie.totalResults,\r\n            currentPage: this.props.movie.currentSearchPage,\r\n            totalPages: this.props.movie.totalSearchPages\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { movie } = this.props;\r\n        if (movie.movies !== prevProps.movie.movies) {\r\n            let movies = this.props.movie.movies;\r\n            if (movies) {\r\n                for (let i = 0; i < movies.length; i++) {\r\n                    this.props.getShortPlot(movies[i].imdbID);\r\n                    this.props.getGenres(movies[i].imdbID);\r\n                }\r\n            }\r\n            this.setState({\r\n                movies: this.props.movie.movies,\r\n                totalResults: this.props.movie.totalResults,\r\n                currentPage: this.props.movie.currentPage,\r\n                totalPages: this.props.movie.totalSearchPages\r\n            });\r\n        }\r\n    }\r\n\r\n    handlePageForward = (event) => {\r\n        this.props.searchMovies(this.props.query, this.props.movie.currentSearchPage + 1);\r\n        this.setState({ currentPage: this.props.movie.currentSearchPage + 1 });\r\n    }\r\n\r\n    handlePageBack = (event) => {\r\n        this.props.searchMovies(this.props.query, this.props.movie.currentSearchPage - 1);\r\n        this.setState({ currentPage: this.props.movie.currentSearchPage - 1 });\r\n    }\r\n\r\n    toFirstPage = (event) => {\r\n        this.props.searchMovies(this.props.query, 1);\r\n        this.setState({ currentPage: 1 });\r\n    }\r\n\r\n    toLastPage = (event) => {\r\n        this.props.searchMovies(this.props.query, this.props.movie.totalSearchPages);\r\n        this.setState({ currentPage: this.props.movie.totalSearchPages });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Card id=\"result-container\" >\r\n                <Grid\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"stretch\"\r\n                    spacing={1}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <h2>Search Results</h2>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        {this.state.totalResults ?\r\n                            <div className=\"search-results-total\"> Found {this.state.totalResults} results for \"{this.props.query}\"</div>\r\n                            : null}\r\n\r\n                        {this.state.movies && this.state.movies.length > 0 ?\r\n                            (<div className=\"pagination-controls\">\r\n                                <IconButton onClick={this.toFirstPage} disabled={this.props.movie.currentSearchPage === 1}>\r\n                                    <FirstPageRoundedIcon />\r\n                                </IconButton>\r\n                                <IconButton onClick={this.handlePageBack} disabled={this.props.movie.currentSearchPage === 1}>\r\n                                    <ChevronLeftRoundedIcon />\r\n                                </IconButton>\r\n                                {this.props.movie.currentSearchPage}/{this.state.totalPages}\r\n                                <IconButton onClick={this.handlePageForward} disabled={this.props.movie.currentSearchPage === this.state.totalPages}>\r\n                                    <ChevronRightRoundedIcon />\r\n                                </IconButton>\r\n                                <IconButton onClick={this.toLastPage} disabled={this.props.movie.currentSearchPage === this.state.totalPages}>\r\n                                    <LastPageRoundedIcon />\r\n                                </IconButton>\r\n                            </div>) : null}\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <div id=\"result-card-container\">\r\n                            {this.state.movies && this.state.movies.length > 0 ? (\r\n                                <Grid container direction=\"column\" justify=\"space-between\" spacing={3}> {this.state.movies.map((movie) => (\r\n                                    <Grid item xs={12} key={movie.imdbID}>\r\n                                        <MovieCard movie={movie} />\r\n                                    </Grid>\r\n                                ))}\r\n                                </Grid>) :\r\n                                <Grid id=\"empty-search\" container direction=\"column\" justify=\"center\" spacing={2}>\r\n                                    <Grid item> No Results found for \"{this.props.query}\"</Grid>\r\n                                </Grid>}\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movie: state.movie\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getShortPlot: (id) => dispatch(getShortPlot(id)),\r\n    getGenres: (id) => dispatch(getGenres(id)),\r\n    searchMovies: (query, page) => dispatch(searchMovies(query, page))\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\r\n","import React from \"react\";\r\nimport { withSnackbar } from 'notistack';\r\nimport { Grid, IconButton, Card, Tooltip, Slide } from \"@material-ui/core\";\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect } from \"react-redux\";\r\nimport { removeNomination } from \"../../redux/movie/movie.actions\";\r\nimport \"./nomination-list-card.styles.scss\";\r\n\r\nclass NominationListCard extends React.Component {\r\n    state = {\r\n        movie: this.props.movie\r\n    }\r\n\r\n    removeNomination(id, title) {\r\n        const closeAlert = key => (\r\n            <IconButton onClick={() => { this.props.closeSnackbar(key) }} className=\"close-toast\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n        );\r\n\r\n        const message = 'Removed \"' + title + '\" from nominations';\r\n\r\n        this.props.removeNomination(id).then(this.props.enqueueSnackbar(message, {\r\n            anchorOrigin: {\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            },\r\n            autoHideDuration: 1500,\r\n            TransitionComponent: Slide,\r\n            variant: \"error\",\r\n            action: closeAlert\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const { movie } = this.state;\r\n        return (\r\n            <Card id=\"nomination-list-card\">\r\n                <Grid container direction=\"row\" alignItems=\"center\">\r\n                    <Grid item xs>\r\n                        <b>{movie.Title}</b> ({movie.Year})\r\n                        <Grid container spacing={1} id=\"nomination-tags-container\">\r\n                            {movie.Genre ? (movie.Genre.map((genre) => (\r\n                                <Grid item key={genre}>\r\n                                    <div className=\"nomination-tags\">{genre}</div>\r\n                                </Grid>)))\r\n                                : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Tooltip title=\"More info\" placement=\"bottom\" arrow>\r\n                            <IconButton className=\"nomination-card-buttons\" onClick={() => window.open(\"https://www.imdb.com/title/\" + movie.imdbID + \"/\", \"_blank\")}>\r\n                                <OpenInNewIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {!this.props.movies.submitted ? (\r\n                            <Tooltip title=\"Remove Nomination\" placement=\"bottom\" arrow>\r\n                                <IconButton className=\"nomination-card-buttons\" onClick={this.removeNomination.bind(this, movie.imdbID, movie.Title)}>\r\n                                    <DeleteIcon />\r\n                                </IconButton>\r\n                            </Tooltip>)\r\n                            : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movies: state.movie\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    removeNomination: (id) => dispatch(removeNomination(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(NominationListCard));","import React from \"react\";\r\nimport { Grid, Button, Dialog, DialogContent } from \"@material-ui/core\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./nomination-submission-dialog.styles.scss\";\r\n\r\nclass NominationSubmissionDialog extends React.Component {\r\n    state = {\r\n        nominations: this.props.movie.nominations\r\n    }\r\n\r\n    closeSubmissionDialog = (e) => {\r\n        this.props.closeDialog(false);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Dialog\r\n                open={this.props.isOpen}\r\n                fullWidth={true}\r\n                maxWidth=\"sm\"\r\n            >\r\n                <DialogContent>\r\n                    <h3> You have submitted your nominations! Below are your nominations: </h3>\r\n                    <Grid container direction=\"column\">\r\n                        {this.state.nominations ? (this.state.nominations.map((movie) => (\r\n                            <Grid item xs={12} key={movie.imdbID}>\r\n                                <b>{movie.Title}</b> ({movie.Year})\r\n                            </Grid>)))\r\n                            : null}\r\n                        <Grid item xs={12}>\r\n                           <br/> You can continue to use the site to search for movies\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid justify=\"flex-end\" container spacing={1}>\r\n                                <Button variant=\"outlined\" onClick={this.closeSubmissionDialog}>\r\n                                    Ok\r\n                                    </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n            </Dialog>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movie: state.movie\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(NominationSubmissionDialog);","import React from \"react\";\r\nimport { Grid, Button, Card } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNomination, getShortPlot, submitNominations } from \"../../redux/movie/movie.actions\";\r\nimport NominationListCard from \"../nomination-list-card/nomination-list-card.component\";\r\nimport NominationSubmissionDialog from \"../nomination-submission-dialog/nomination-submission-dialog.component\";\r\nimport \"./nominations-list.styles.scss\";\r\n\r\nclass NominationsList extends React.Component {\r\n    state = {\r\n        nominations: this.props.movie.nominations,\r\n        completeNominations: false,\r\n        submitted: this.props.movie.submitted\r\n    }\r\n\r\n    submitNominations = (e) => {\r\n        this.props.submitNominations();\r\n        this.setState({ completeNominations: true })\r\n    }\r\n\r\n    closeSubmissionDialog = (openDialog) => {\r\n        this.setState({ completeNominations: openDialog, nominations: this.props.movie.nominations, submitted: this.props.movie.submitted });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { movie } = this.props;\r\n        if (movie.nominations !== prevProps.movie.nominations || movie.submitted !== prevProps.movie.submitted) {\r\n            this.setState({ nominations: this.props.movie.nominations, submitted: this.props.movie.submitted });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NominationSubmissionDialog isOpen={this.state.completeNominations} closeDialog={this.closeSubmissionDialog} />\r\n\r\n                <Card id=\"nominations-container\" >\r\n                    <Grid\r\n                        container\r\n                        direction=\"column\"\r\n                        justify=\"center\"\r\n                        alignItems=\"stretch\"\r\n                        spacing={1}\r\n                    >\r\n                        <Grid item xs={12}>\r\n                            <h2>Nominations </h2>\r\n                            <h3 className=\"nomination-count\">({this.state.nominations.length}/5)</h3>\r\n                        </Grid>\r\n                        <Grid item xs={12} id=\"alert-container\">\r\n                            {this.state.nominations && this.state.nominations.length === 5 && !this.state.submitted ?\r\n                                <Alert severity=\"success\" action={\r\n                                    <Button color=\"inherit\" size=\"small\" onClick={this.submitNominations}>\r\n                                        Submit\r\n                                </Button>\r\n                                }>\r\n                                    You have added 5 nominations to your list\r\n                            </Alert> : null}\r\n\r\n                            {this.state.submitted ? <Alert severity=\"info\"> You have successfully nominated the following movies: </Alert> : null}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <div id=\"nomination-card-container\">\r\n                                <div id={this.state.nominations && this.state.nominations.length === 5 ? \"alert-shown\" : \"no-alert\"}>\r\n                                    {this.state.nominations && this.state.nominations.length > 0 ?\r\n                                        (<Grid container direction=\"column\" spacing={1}>\r\n                                            {this.state.nominations.map((movie) => (\r\n                                                <Grid item key={movie.imdbID}>\r\n                                                    <NominationListCard movie={movie} />\r\n                                                </Grid>\r\n                                            ))}\r\n                                        </Grid>) :\r\n                                        <Grid id=\"empty-nominations\" container direction=\"column\" justify=\"center\" spacing={2}>\r\n                                            <Grid item> Nominations are empty!</Grid>\r\n                                            <Grid item> Search for movies and click NOMINATE to add a nomination </Grid>\r\n                                        </Grid>}\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Card >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movie: state.movie\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getShortPlot: (id) => dispatch(getShortPlot(id)),\r\n    addNomination: (id) => dispatch(addNomination(id)),\r\n    submitNominations: () => dispatch(submitNominations())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NominationsList);\r\n","import React from 'react';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport SearchBar from \"../searchbar/searchbar.component\";\r\nimport SearchResults from \"../search-results/search-results.component\";\r\nimport NominationsList from \"../nominations-list/nominations-list.component\";\r\nimport { connect } from \"react-redux\";\r\nimport { clearSearch } from \"../../redux/movie/movie.actions\";\r\nimport \"./nominate-movies.styles.scss\";\r\n\r\nclass NominateMovies extends React.Component {\r\n    state = {\r\n        query: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.clearSearch();\r\n    }\r\n\r\n    onQueryUpdate(newQuery) {\r\n        this.setState({ query: newQuery });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Grid\r\n                id=\"nominate-container\"\r\n                container\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"stretch\"\r\n                spacing={2}\r\n            >\r\n                <Grid item xs={12}>\r\n                    <h1>Nominate Movies</h1>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <SearchBar updateQuery={this.onQueryUpdate.bind(this)} />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    <Grid\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        spacing={1}\r\n                    >\r\n                        <Grid item xs={12} md={7}>\r\n                            <SearchResults query={this.state.query} />\r\n                        </Grid>\r\n                        <Grid item xs={12} md={5}>\r\n                            <NominationsList />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    clearSearch: () => dispatch(clearSearch())\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(NominateMovies);","import React from 'react';\r\nimport { withSnackbar } from 'notistack';\r\nimport { Grid, IconButton, Card, Tooltip, Slide } from \"@material-ui/core\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { connect } from \"react-redux\";\r\nimport { removeNomination } from \"../../redux/movie/movie.actions\";\r\nimport defaultPoster from \"../../assets/defaultPoster.jpg\";\r\nimport \"./my-nominations-card.styles.scss\";\r\n\r\nclass MyNominationCard extends React.Component {\r\n    state = {\r\n        movie: this.props.movie\r\n    }\r\n\r\n    addDefaultSrc(ev) {\r\n        ev.target.src = defaultPoster;\r\n    }\r\n\r\n    removeNomination(id, title) {\r\n        const closeAlert = key => (\r\n            <IconButton onClick={() => { this.props.closeSnackbar(key) }} className=\"close-toast\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n        );\r\n\r\n        const message = 'Removed \"' + title + '\" from nominations';\r\n\r\n        this.props.removeNomination(id).then(this.props.enqueueSnackbar(message, {\r\n            anchorOrigin: {\r\n                vertical: 'bottom',\r\n                horizontal: 'right',\r\n            },\r\n            autoHideDuration: 1500,\r\n            TransitionComponent: Slide,\r\n            variant: \"error\",\r\n            action: closeAlert\r\n        }));\r\n    }\r\n\r\n\r\n    render() {\r\n        const { movie } = this.state;\r\n        return (\r\n            <Card id=\"nomination-card\" key={movie.imdbID}>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"stretch\">\r\n                    <Grid item xs={12}>\r\n                        {movie.Poster ? (\r\n                            <img id=\"nomination-poster\" src={movie.Poster} alt=\"Poster not available\" onError={this.addDefaultSrc}></img>\r\n                        ) : <img id=\"nomination-poster\" src={defaultPoster} alt=\"Poster not available\"></img>}\r\n                    </Grid>\r\n                    <Grid xs={12} item className=\"nomination-movie-title\">\r\n                        <b>{movie.Title}</b> ({movie.Year})\r\n                    </Grid>\r\n                </Grid>\r\n                <div>\r\n                    <Tooltip title=\"More info\" placement=\"bottom\" arrow>\r\n                        <IconButton className=\"nomination-card-buttons\" onClick={() => window.open(\"https://www.imdb.com/title/\" + movie.imdbID + \"/\", \"_blank\")}>\r\n                            <OpenInNewIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    {!this.props.movies.submitted ? (\r\n                        <Tooltip title=\"Remove Nomination\" placement=\"bottom\" arrow>\r\n                            <IconButton className=\"nomination-card-buttons\" onClick={this.removeNomination.bind(this, movie.imdbID, movie.Title)}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </Tooltip>)\r\n                        : null}\r\n                </div>\r\n            </Card>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movies: state.movie\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    removeNomination: (id) => dispatch(removeNomination(id))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withSnackbar(MyNominationCard));","import React from 'react';\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\nimport { connect } from \"react-redux\";\r\nimport { submitNominations } from \"../../redux/movie/movie.actions\";\r\nimport MyNominationsCard from \"../my-nominations-card/my-nominations-card.component\";\r\nimport NominationSubmissionDialog from \"../nomination-submission-dialog/nomination-submission-dialog.component\";\r\nimport \"./my-nominations.styles.scss\";\r\n\r\n\r\nclass MyNominations extends React.Component {\r\n    state = {\r\n        nominations: this.props.movie.nominations,\r\n        completeNominations: false,\r\n        submitted: this.props.movie.submitted\r\n    }\r\n\r\n    submitNominations = (e) => {\r\n        this.props.submitNominations();\r\n        this.setState({ completeNominations: true })\r\n    }\r\n\r\n    closeSubmissionDialog = (openDialog) => {\r\n        this.setState({ completeNominations: openDialog, nominations: this.props.movie.nominations });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { movie } = this.props;\r\n        if (movie.nominations !== prevProps.movie.nominations || movie.submitted !== prevProps.movie.submitted) {\r\n            this.setState({ nominations: this.props.movie.nominations, submitted: this.props.movie.submitted });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NominationSubmissionDialog isOpen={this.state.completeNominations} closeDialog={this.closeSubmissionDialog} />\r\n\r\n                <Grid container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    spacing={1}\r\n                >\r\n                    <Grid item xs={12}>\r\n                        <h1>My Nominations</h1>\r\n                    </Grid>\r\n                    <Grid item xs={12} id=\"my-nomination-alert-container\">\r\n                        {this.state.nominations && this.state.nominations.length === 5 && !this.state.submitted ?\r\n                            <Alert severity=\"success\" action={\r\n                                <Button color=\"inherit\" size=\"small\" onClick={this.submitNominations}>\r\n                                    Submit\r\n                                </Button>\r\n                            }>\r\n                                You have added 5 nominations to your list\r\n                            </Alert> :\r\n                            <div className=\"nomination-count-message\">\r\n                                {this.state.submitted ? \"You have successfully nominated the following movies:\" :\r\n                                    \"You have nominated \" + this.state.nominations.length + '/5 movies. Go to the \"Nominate Movies\" page to nominate more movies'}\r\n                            </div>}\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                        <Grid container direction=\"row\" alignItems=\"stretch\" justify=\"center\" spacing={1} >\r\n                            {this.state.nominations && this.state.nominations.length > 0 ? (this.state.nominations.map((movie) => (\r\n                                <Grid item xs={12} sm={4} md lg key={movie.imdbID} id=\"nomination-card-wrapper\">\r\n                                    <MyNominationsCard movie={movie} />\r\n                                </Grid>\r\n                            ))) : null}\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    movie: state.movie\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    submitNominations: () => dispatch(submitNominations())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyNominations);","import './App.css';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport Homepage from \"./components/hompage/homepage.component\";\r\nimport NavBar from \"./components/navbar/navbar.component\"\r\nimport NominateMovies from \"./components/nominate-movies/nominate-movies.component\";\r\nimport MyNominations from \"./components/my-nominations/my-nominations.component\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <link href=\"https://fonts.googleapis.com/css2?family=Oranienbaum&display=swap\" rel=\"stylesheet\"></link>\r\n      <SnackbarProvider maxSnack={3}>\r\n        <BrowserRouter basename=\"the-shoppies-fall2021\">\r\n          <NavBar />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Homepage} />\r\n            <Route exact path=\"/nominate-movies\" component={NominateMovies} />\r\n            <Route exact path=\"/my-nominations\" component={MyNominations} />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </SnackbarProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { createStore, applyMiddleware} from \"redux\";\r\nimport rootReducer from \"./root.reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nimport {persistStore, } from \"redux-persist\";\r\n\r\nconst numberPersistConfig = {\r\n    key: \"persistedStore\"\r\n};\r\n\r\nconst persist = (persistConfig, reducer) =>\r\n  persistReducer({ ...persistConfig, storage }, reducer);\r\n\r\nconst reducer = persist(numberPersistConfig, rootReducer);\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(reducer, applyMiddleware(...middleware));\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport default store;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import MOVIE_ACTION_TYPES from \"./movie.action.types\";\r\nconst INITIAL_STATE = {\r\n    movies: null,\r\n    nominations: [],\r\n    submitted: false,\r\n    totalResults: 0,\r\n    currentSearchPage: 1,\r\n    totalSearchPages: 0\r\n};\r\n\r\nconst movieReducer = (prevState = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case MOVIE_ACTION_TYPES.MOVIE_SEARCH_SUCCESS:\r\n            return {\r\n                ...prevState,\r\n                movies: action.payload.result,\r\n                totalResults: action.payload.totalResults,\r\n                currentSearchPage: action.payload.page,\r\n                totalSearchPages: action.payload.totalResults >= 10 ? Math.floor(action.payload.totalResults/10) : 1\r\n            };\r\n        case MOVIE_ACTION_TYPES.RETRIEVE_MOVIE_PLOT_SHORT:\r\n            let index = prevState.movies ? prevState.movies.findIndex(movie => movie.imdbID === action.payload.imdbID) : -1;\r\n            if (index !== -1) prevState.movies[index].Plot = action.payload.Plot;\r\n            return {\r\n                ...prevState\r\n            };\r\n        case MOVIE_ACTION_TYPES.RETRIEVE_MOVIE_GENRES: {\r\n            let index = prevState.movies ? prevState.movies.findIndex(movie => movie.imdbID === action.payload.imdbID) : -1;\r\n            if (index !== -1) prevState.movies[index].Genre = action.payload.Genre.split(\", \");\r\n            return {\r\n                ...prevState\r\n            }\r\n        }\r\n        case MOVIE_ACTION_TYPES.ADD_NOMINATION_SUCCESS:\r\n            return {\r\n                ...prevState,\r\n                nominations: action.payload\r\n            }\r\n        case MOVIE_ACTION_TYPES.REMOVE_NOMINATION_SUCCESS:\r\n            return {\r\n                ...prevState,\r\n                nominations: action.payload\r\n            }\r\n        case MOVIE_ACTION_TYPES.SUBMIT_NOMINATION_SUCCESS: {\r\n            return {\r\n                ...prevState,\r\n                submitted: true\r\n            }\r\n        }\r\n        case MOVIE_ACTION_TYPES.CLEAR_SEARCH_SUCCESS: {\r\n            return {\r\n                ...prevState,\r\n                movies: null,\r\n                totalResults: 0,\r\n                currentSearchPage: 1\r\n            }\r\n        }\r\n        default:\r\n            return prevState;\r\n    }\r\n};\r\n\r\nexport default movieReducer;","import { combineReducers } from \"redux\";\r\nimport movieReducer from \"./movie/movie.reducer\"\r\n\r\nexport default combineReducers({\r\n  movie: movieReducer\r\n});","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#43535e\"\r\n    },\r\n    secondary: {\r\n      main: \"rgb(193, 215, 222)\"\r\n    }\r\n  }\r\n});\r\n\r\nexport default theme;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport store, { persistor } from \"./redux/store.js\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nimport theme from \"./theme\"\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <ThemeProvider theme={theme}>\n        <App />\n      </ThemeProvider>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}